- name: Validar com Gemini 2.0 Flash (JSON estrito)
  id: gemini
  env:
    GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  run: |
    # ---- 1) SCHEMA (tipos em MAIÚSCULOS, sem union/null, sem additionalProperties) ----
    SCHEMA=$(cat <<'JSON'
    {
      "type": "OBJECT",
      "properties": {
        "aprovado": { "type": "BOOLEAN" },
        "motivos":  { "type": "ARRAY", "items": { "type": "STRING" } },
        "titulo_corrigido": { "type": "STRING" },
        "observacoes": { "type": "STRING" }
      },
      "required": ["aprovado", "motivos"]
    }
    JSON
    )

    # ---- 2) SYSTEM (formato Content: role + parts[].text) ----
    SYS=$(cat <<'TXT'
    Você é um revisor de qualidade de bugs.
    Aprove apenas se TODOS os campos obrigatórios estiverem informativos:
    - Descrição do Bug (contexto/impacto)
    - Localização (caminho/tela)
    - Passos para Reprodução (passo a passo claro)
    - Evidências (link de print/vídeo)
    - Resultado Esperado (comportamento correto)
    Responda SOMENTE no schema JSON definido.
    TXT
    )

    # ---- 3) USER (dados do formulário) ----
    USER=$(cat <<'TXT'
    Descrição do Bug:
    ${{ steps.parse.outputs.descricao }}

    Localização:
    ${{ steps.parse.outputs.localizacao }}

    Passos para Reprodução:
    ${{ steps.parse.outputs.passos }}

    Evidências:
    ${{ steps.parse.outputs.evidencias }}

    Resultado Esperado:
    ${{ steps.parse.outputs.resultado }}
    TXT
    )

    # ---- 4) Payload (system_instruction como Content; response_schema conforme esperado) ----
    PAYLOAD=$(jq -n \
      --arg sys "$SYS" \
      --arg user "$USER" \
      --argjson schema "$SCHEMA" \
      '{
        system_instruction: { role: "system", parts: [ { text: $sys } ] },
        contents: [ { role: "user", parts: [ { text: $user } ] } ],
        generationConfig: {
          response_mime_type: "application/json",
          response_schema: $schema,
          temperature: 0.2
        }
      }'
    )

    # ---- 5) Chamada HTTP com status para debug ----
    HTTP=$(curl -sS -w "%{http_code}" -o resp.json \
      -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent" \
      -H "Content-Type: application/json" \
      -H "x-goog-api-key: $GOOGLE_API_KEY" \
      -d "$PAYLOAD")

    echo "HTTP status: $HTTP"
    if [ "$HTTP" -lt 200 ] || [ "$HTTP" -ge 300 ]; then
      echo "Resposta da API (erro):"
      cat resp.json
      exit 1
    fi

    # ---- 6) Extrair JSON do modelo ----
    TEXT=$(jq -r '.candidates[0].content.parts[0].text // empty' resp.json)
    if [ -z "$TEXT" ]; then
      echo "Resposta sem conteúdo de texto esperado:"
      cat resp.json
      exit 1
    fi

    echo "$TEXT" | jq . > gemini.json || {
      echo "O modelo não retornou JSON válido:"
      echo "$TEXT"
      exit 1
    }

    APROVADO=$(jq -r '.aprovado' gemini.json)
    TITULO_CORRIGIDO=$(jq -r '.titulo_corrigido' gemini.json)

    echo "aprovado=$APROVADO" >> $GITHUB_OUTPUT
    echo "titulo_ok=$TITULO_CORRIGIDO" >> $GITHUB_OUTPUT
