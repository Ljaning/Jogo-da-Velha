name: Validar solicitação com Gemini 2.5 Flash e criar issue

on:
  issues:
    types: [opened, labeled]

concurrency:
  group: intake-${{ github.event.issue.node_id }}
  cancel-in-progress: true

permissions:
  issues: write
  contents: read

jobs:
  gatekeep:
    runs-on: ubuntu-latest
    if: >
      contains(github.event.issue.labels.*.name, 'solicitacao') ||
      (github.event.action == 'labeled' && github.event.label.name == 'solicitacao')
    env:
      GEMINI_MODEL: gemini-2.5-flash

    steps:
      - name: Debug do evento
        run: |
          echo "action: ${{ github.event.action }}"
          echo "label (se for labeled): ${{ github.event.label.name }}"
          echo "labels atuais: ${{ toJson(github.event.issue.labels) }}"
          echo "body (início):"
          echo "${{ github.event.issue.body }}" | head -n 40

      - name: Extrair campos do formulário (novos cabeçalhos)
        id: parse
        run: |
          BODY=$(printf "%s" "${{ github.event.issue.body }}")
          extrair() {
            echo "$BODY" | awk -v header="### $1" '
              $0==header {flag=1; next}
              /^### / && flag {flag=0}
              flag {print}
            ' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//'
          }
          DESCRICAO=$(extrair "Descrição do Bug")
          LOCALIZACAO=$(extrair "Localização")
          PASSOS=$(extrair "Passos para Reprodução")
          EVIDENCIAS=$(extrair "Evidências")
          RESULTADO=$(extrair "Resultado Esperado")
          DESTINO=$(extrair "Repositório de destino" | head -n 1)
          TITULO=$(printf "%s" "$DESCRICAO" | sed -n '1p' | sed 's/#\+//g; s/\r//g')
          [ -z "$TITULO" ] && TITULO="Bug report"
          {
            echo "descricao<<EOF";   echo "$DESCRICAO";   echo "EOF";
            echo "localizacao<<EOF"; echo "$LOCALIZACAO"; echo "EOF";
            echo "passos<<EOF";      echo "$PASSOS";      echo "EOF";
            echo "evidencias<<EOF";  echo "$EVIDENCIAS";  echo "EOF";
            echo "resultado<<EOF";   echo "$RESULTADO";   echo "EOF";
            echo "destino=$DESTINO";
            echo "titulo=$TITULO";
          } >> $GITHUB_OUTPUT

      - name: Pré-validação determinística
        id: precheck
        run: |
          fail() { echo "$1" >> precheck_errors.txt; }
          DESC="${{ steps.parse.outputs.descricao }}"
          LOC="${{ steps.parse.outputs.localizacao }}"
          PASS="${{ steps.parse.outputs.passos }}"
          EVID="${{ steps.parse.outputs.evidencias }}"
          RES="${{ steps.parse.outputs.resultado }}"
          TOTLEN=$(printf "%s%s%s%s%s" "$DESC" "$LOC" "$PASS" "$EVID" "$RES" | wc -c)
          [ "$TOTLEN" -gt 450 ] && fail "Texto total ultrapassa 450 caracteres (atual: ${TOTLEN})."
          SENT=$(printf "%s" "$DESC" | tr '\n' ' ' | grep -oE '[.!?]' | wc -l || true)
          [ "$SENT" -gt 2 ] && fail "Descrição do Bug deve ter no máximo 2 frases com contexto (como/quando)."
          [ -z "$(printf "%s" "$LOC" | tr -d '[:space:]')" ] && \
            fail "Localização obrigatória; informe o caminho/tela (ex.: Tela principal > Tabuleiro)."
          CNT=$(printf "%s" "$PASS" | grep -E '^[[:space:]]*[0-9]+[.)]' | wc -l || true)
          [ "$CNT" -lt 2 ] && fail "Passos para Reprodução devem ser numerados (1), 2), ...) e ter no mínimo 2 passos."
          printf "%s" "$EVID" | grep -Eiq '!\[[^]]*\]\(|https?://|\.png|\.jpg|\.jpeg|\.gif|\.mp4|\.mov' || \
            fail "Evidências devem conter ao menos 1 URL (print/vídeo) ou arquivo anexado."
          printf "%s" "$RES" | grep -Eiq 'funcion(a|e) corretamente|sem erro(s)?|deveria funcionar|ok' && \
            fail "Resultado esperado está genérico; descreva comportamento específico e verificável."
          printf "%s %s %s" "$DESC" "$EVID" "$PASS" | \
          grep -Eiq '(AKIA[0-9A-Z]{16}|-----BEGIN (RSA|OPENSSH) PRIVATE KEY-----|password=|secret=|x-api-key|token=|Authorization: Bearer)' && {
            echo "escalar=true" >> $GITHUB_OUTPUT
            fail "Possível dado sensível detectado (chaves/senhas/segredos); remova ou redija."
          }
          if [ -f precheck_errors.txt ]; then
            echo "found_errors=true" >> $GITHUB_OUTPUT
          else
            echo "found_errors=false" >> $GITHUB_OUTPUT
          fi

      - name: Reprovar por pré-validação
        if: steps.precheck.outputs.found_errors == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs')
            const raw = fs.readFileSync('precheck_errors.txt','utf8')
            const motivos = raw.split('\n').filter(Boolean)
            const sug = motivos.map(m => {
              if (m.includes('Texto total ultrapassa')) return '- Reduza as respostas para no máximo 450 caracteres.'
              if (m.includes('no máximo 2 frases')) return '- Reescreva a descrição em até 2 frases com contexto (como/quando ocorreu).'
              if (m.includes('Localização obrigatória')) return '- Informe o caminho/tela. Ex.: Tela principal > Tabuleiro.'
              if (m.includes('Passos para Reprodução')) return '- Liste pelo menos 2 passos numerados (1), 2), ...).'
              if (m.includes('Evidências devem')) return '- Inclua ao menos 1 link de print/vídeo ou anexe um arquivo.'
              if (m.includes('Resultado esperado está genérico')) return '- Descreva o comportamento correto verificável (ex.: “limpar células e resetar o contador”).'
              if (m.includes('Possível dado sensível')) return '- Remova chaves/senhas/segredos e substitua por <redigido>.'
              return `- ${m}`
            })
            const bullets = motivos.map(x => `- ${x}`).join('\n')
            const sugestoes = sug.join('\n')
            const body =
`A solicitação não foi aprovada pela validação automática.

**Motivos:**
${bullets}

**Sugestões:**
${sugestoes}

Reveja e reabra com as correções.`
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            })
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            })

      - name: Validar com Gemini 2.5 Flash (JSON estrito)
        id: gemini
        if: steps.precheck.outputs.found_errors == 'false'
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GEMINI_MODEL: ${{ env.GEMINI_MODEL }}
        run: |
          SCHEMA=$(cat <<'JSON'
          {
            "type": "OBJECT",
            "properties": {
              "aprovado": { "type": "BOOLEAN" },
              "escalar":  { "type": "BOOLEAN" },
              "score":    { "type": "NUMBER" },
              "motivos":  { "type": "ARRAY", "items": { "type": "STRING" } },
              "sugestoes":{ "type": "ARRAY", "items": { "type": "STRING" } },
              "titulo_corrigido": { "type": "STRING" }
            },
            "required": ["aprovado","escalar","motivos"]
          }
          JSON
          )
          SYS=$(cat <<'TXT'
          Você é um revisor de qualidade de bugs. Linguagem: Português (Brasil). Seja objetivo e claro.
          Aprove SOMENTE se TODAS as regras forem atendidas:
          - Título: até 7 palavras (conciso, preserva contexto).
          - Descrição: até 2 frases com contexto (como e quando).
          - Localização: tem ao menos 1 nível.
          - Passos: numerados, pelo menos 2 passos.
          - Evidências: contém ao menos 1 URL ou anexo.
          - Resultado: específico e verificável (não genérico).
          - Sem PII/segredos; se houver → escalar=true e reprove.
          O que você NÃO deve fazer: estimar esforço, priorizar, sugerir solução técnica ou culpados.
          Responda SOMENTE no schema JSON. Preencha "motivos" e "sugestoes" como bullets curtos e diretos.
          Se possível, proponha "titulo_corrigido" (<= 7 palavras).
          TXT
          )
          USER=$(cat <<'TXT'
          Descrição do Bug:
          ${{ steps.parse.outputs.descricao }}

          Localização:
          ${{ steps.parse.outputs.localizacao }}

          Passos para Reprodução:
          ${{ steps.parse.outputs.passos }}

          Evidências:
          ${{ steps.parse.outputs.evidencias }}

          Resultado Esperado:
          ${{ steps.parse.outputs.resultado }}
          TXT
          )
          PAYLOAD=$(jq -n \
            --arg sys "$SYS" \
            --arg user "$USER" \
            --argjson schema "$SCHEMA" \
            '{
              system_instruction: { role: "system", parts: [ { text: $sys } ] },
              contents: [ { role: "user", parts: [ { text: $user } ] } ],
              generationConfig: {
                response_mime_type: "application/json",
                response_schema: $schema,
                temperature: 0.1
              }
            }'
          )
          HTTP=$(curl -sS -w "%{http_code}" -o resp.json \
            -X POST "https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent" \
            -H "Content-Type: application/json" \
            -H "x-goog-api-key: $GOOGLE_API_KEY" \
            -d "$PAYLOAD")
          echo "HTTP status: $HTTP"
          if [ "$HTTP" -lt 200 ] || [ "$HTTP" -ge 300 ]; then echo "Erro:"; cat resp.json; exit 1; fi
          TEXT=$(jq -r '.candidates[0].content.parts[0].text // empty' resp.json)
          [ -z "$TEXT" ] && { echo "Sem texto"; cat resp.json; exit 1; }
          echo "$TEXT" | jq . > gemini.json || { echo "$TEXT"; exit 1; }
          APROVADO=$(jq -r '.aprovado' gemini.json)
          ESCALAR=$(jq -r '.escalar' gemini.json)
          TITULO_CORRIGIDO=$(jq -r '.titulo_corrigido // empty' gemini.json)
          if [ "$ESCALAR" = "true" ]; then APROVADO=false; fi
          echo "aprovado=$APROVADO" >> $GITHUB_OUTPUT
          echo "titulo_ok=$TITULO_CORRIGIDO" >> $GITHUB_OUTPUT

      - name: Criar issue no repositório de destino (se aprovado)
        if: steps.gemini.outputs.aprovado == 'true'
        id: create_issue
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          DEST: ${{ steps.parse.outputs.destino }}
        run: |
          RAW="${{ steps.gemini.outputs.titulo_ok }}"
          [ -z "$RAW" ] || [ "$RAW" = "null" ] && RAW="$(printf "%s" "${{ steps.parse.outputs.titulo }}")"
          TITLE=$(printf "%s\n" "$RAW" | awk '{ n=7; for(i=1;i<=NF && i<=n;i++) printf("%s%s",$i,(i==n||i==NF)?"":" "); print "" }')
          BODY="**Descrição do Bug**:\n${{ steps.parse.outputs.descricao }}\n\n**Localização**:\n${{ steps.parse.outputs.localizacao }}\n\n**Passos para Reprodução**:\n${{ steps.parse.outputs.passos }}\n\n**Evidências**:\n${{ steps.parse.outputs.evidencias }}\n\n**Resultado Esperado**:\n${{ steps.parse.outputs.resultado }}\n\n_Criada automaticamente após aprovação (Gemini 2.5 Flash)._"
          OWNER=${DEST%%/*}
          REPO=${DEST#*/}
          RESP=$(gh api repos/$OWNER/$REPO/issues -f title="$TITLE" -f body="$BODY")
          echo "$RESP" | jq -r '.html_url' > created_url.txt
          echo "url=$(cat created_url.txt)" >> $GITHUB_OUTPUT

      - name: Comentar link e fechar solicitação (se aprovado)
        if: steps.gemini.outputs.aprovado == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs')
            const url = fs.readFileSync('created_url.txt','utf8').trim()
            const body = `✅ **Aprovada** e criada no destino:\n${url}\n\nFechando esta solicitação.`
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            })
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            })

      - name: Comentar e fechar solicitação (se reprovado)
        if: steps.precheck.outputs.found_errors == 'false' && steps.gemini.outputs.aprovado != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs')
            const j = JSON.parse(fs.readFileSync('gemini.json','utf8'))
            const motivos = (j.motivos || []).map(m => `- ${m}`).join('\n') || '- Não informado.'
            const sugestoes = (j.sugestoes || []).map(s => `- ${s}`).join('\n') || '- Ajuste os campos obrigatórios conforme os motivos.'
            const body =
`A solicitação não foi aprovada pela validação automática.

**Motivos:**
${motivos}

**Sugestões:**
${sugestoes}

Reveja e reabra com as correções.`
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            })
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            })
