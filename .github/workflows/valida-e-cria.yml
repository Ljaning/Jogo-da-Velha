name: Validar solicitação com Gemini 2.5 Flash e criar issue

on:
  issues:
    types: [opened] # dispara ao abrir a issue; o próprio workflow põe Status=Triage no Project

concurrency:
  group: intake-${{ github.event.issue.node_id }}
  cancel-in-progress: true

permissions:
  issues: write
  contents: read
  # Para Projects v2, use GH_PAT nos steps (não existe chave 'projects' aqui)

jobs:
  gatekeep:
    runs-on: ubuntu-latest
    env:
      GEMINI_MODEL: gemini-2.5-flash
      GH_TOKEN: ${{ secrets.GH_PAT }} # PAT com Projects:RW e Issues:RW

    steps:
      - name: Debug do evento
        run: |
          echo "issue: ${{ github.event.issue.html_url }}"
          echo "labels: ${{ toJson(github.event.issue.labels) }}"

      # 1) Adiciona a issue ao Project 'projeto-teste' e seta Status=Triage
      - name: Adicionar ao Project v2 e setar Status=Triage
        id: pitem
        env:
          ORG: Ljaning
          PROJECT_TITLE: projeto-teste
          ISSUE_NODE: ${{ github.event.issue.node_id }}
        run: |
          set -e

          # 1.1) Descobrir o ID do projeto por título
          gh api graphql -f query='
            query($org:String!){
              organization(login:$org){
                projectsV2(first:100){
                  nodes{ id title }
                }
              }
            }' -f org="$ORG" > proj.json

          PROJECT_ID=$(jq -r --arg t "$PROJECT_TITLE" '.data.organization.projectsV2.nodes[] | select(.title==$t) | .id' proj.json)
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
            echo "Projeto \"$PROJECT_TITLE\" não encontrado na organização $ORG." >&2
            exit 1
          fi

          # 1.2) Adicionar a issue como item do projeto
          gh api graphql -f query='
            mutation($pid:ID!, $cid:ID!){
              addProjectV2ItemById(input:{projectId:$pid, contentId:$cid}){
                item { id }
              }
            }' -f pid="$PROJECT_ID" -f cid="$ISSUE_NODE" > add.json

          ITEM_ID=$(jq -r '.data.addProjectV2ItemById.item.id' add.json)
          if [ -z "$ITEM_ID" ] || [ "$ITEM_ID" = "null" ]; then
            echo "Falha ao adicionar a issue como item do projeto." >&2
            exit 1
          fi

          # 1.3) Obter campo Status e optionId de Triage e Backlog
          gh api graphql -f query='
            query($pid:ID!){
              node(id:$pid){
                ... on ProjectV2{
                  fields(first:100){
                    nodes{
                      ... on ProjectV2SingleSelectField{
                        id name
                        options{ id name }
                      }
                    }
                  }
                }
              }
            }' -f pid="$PROJECT_ID" > fields.json

          STATUS_FIELD_ID=$(jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id' fields.json)
          TRIAGE_OPT=$(jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="Triage") | .id' fields.json)
          BACKLOG_OPT=$(jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="Backlog") | .id' fields.json)

          if [ -z "$STATUS_FIELD_ID" ] || [ -z "$TRIAGE_OPT" ] || [ -z "$BACKLOG_OPT" ]; then
            echo "Campo 'Status' e/ou opções 'Triage'/'Backlog' não encontrados no projeto." >&2
            exit 1
          fi

          # 1.4) Setar Status=Triage no item recém-adicionado
          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $opt:String!){
              updateProjectV2ItemFieldValue(input:{
                projectId:$project,
                itemId:$item,
                fieldId:$field,
                value:{ singleSelectOptionId:$opt }
              }){ clientMutationId }
            }' \
            -f project="$PROJECT_ID" -f item="$ITEM_ID" -f field="$STATUS_FIELD_ID" -f opt="$TRIAGE_OPT" >/dev/null

          {
            echo "project_id=$PROJECT_ID"
            echo "item_id=$ITEM_ID"
            echo "status_field_id=$STATUS_FIELD_ID"
            echo "backlog_opt=$BACKLOG_OPT"
          } >> $GITHUB_OUTPUT

      # 2) Captura o corpo da issue aberta (template)
      - name: Dump do corpo da issue
        run: |
          printf "%s" "${{ github.event.issue.body }}" > issue_body.md

      # 3) Extrair campos do formulário
      - name: Extrair campos do formulário
        id: parse
        run: |
          set -e

          BODY=$(printf "%s" "${{ github.event.issue.body }}")

          extrair() {
            # Match robusto do cabeçalho "### <label>" ignorando espaços à direita
            awk -v header="$1" '
              BEGIN{ pat="^### " header "[[:space:]]*$" }
              $0 ~ pat {flag=1; next}
              /^### [^#]/ && flag {flag=0}
              flag {print}
            ' <<< "$BODY" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//'
          }

          DESCRICAO=$(extrair "Descrição do Bug")
          LOCALIZACAO=$(extrair "Localização")
          PASSOS=$(extrair "Passos para Reprodução")
          EVIDENCIAS=$(extrair "Evidências")
          RESULTADO=$(extrair "Resultado Esperado")

          # Tenta extrair o destino por diferentes rótulos (fallbacks)
          extrair_nn() {
            # pega a seção "### <label>" e retorna a 1ª linha não-vazia
            extrair "$1" | awk 'NF{print; exit}'
          }

          # Também tenta padrão "**<label>**" (negrito), muito comum em issue forms
          extrair_bold() {
            awk -v lbl="$1" '
              BEGIN{ pat="^\\*\\*"?lbl"?\\*\\*$" }
              $0 ~ pat {getline; while ($0 ~ /^$/) { if (!getline) exit }; if ($0 !~ /^$/) { print; exit } }
            ' <<< "$BODY" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//'
          }

          DESTINO="$(extrair_nn "Repositório de destino")"
          [ -z "$DESTINO" ] && DESTINO="$(extrair_nn "Destino")"
          [ -z "$DESTINO" ] && DESTINO="$(extrair_nn "Target repository")"
          [ -z "$DESTINO" ] && DESTINO="$(extrair_nn "Repositório")"

          # Fallback para forma em negrito
          [ -z "$DESTINO" ] && DESTINO="$(extrair_bold "Repositório de destino")"
          [ -z "$DESTINO" ] && DESTINO="$(extrair_bold "Destino")"
          [ -z "$DESTINO" ] && DESTINO="$(extrair_bold "Target repository")"
          [ -z "$DESTINO" ] && DESTINO="$(extrair_bold "Repositório")"

      # 4) Pré-validação determinística
      - name: Pré-validação determinística
        id: precheck
        run: |
          fail() { echo "$1" >> precheck_errors.txt; }

          DESC="${{ steps.parse.outputs.descricao }}"
          LOC="${{ steps.parse.outputs.localizacao }}"
          PASS="${{ steps.parse.outputs.passos }}"
          EVID="${{ steps.parse.outputs.evidencias }}"
          RES="${{ steps.parse.outputs.resultado }}"

          # Limite total
          TOTLEN=$(printf "%s%s%s%s%s" "$DESC" "$LOC" "$PASS" "$EVID" "$RES" | wc -c)
          [ "$TOTLEN" -gt 800 ] && fail "Texto total ultrapassa 800 caracteres (atual: ${TOTLEN})."

          # Descrição: no máximo 2 frases
          SENT=$(printf "%s" "$DESC" | tr '\n' ' ' | grep -oE '[.!?]' | wc -l || true)
          [ "$SENT" -gt 2 ] && fail "Descrição do Bug deve ter no máximo 2 frases com contexto (como/quando)."

          # Localização obrigatória
          [ -z "$(printf "%s" "$LOC" | tr -d '[:space:]')" ] && \
            fail "Localização obrigatória; informe o caminho/tela (ex.: Tela principal > Tabuleiro)."

          # Passos: numerados e >=2
          CNT=$(printf "%s" "$PASS" | grep -E '^[[:space:]]*[0-9]+[.)]' | wc -l || true)
          [ "$CNT" -lt 2 ] && fail "Passos para Reprodução devem ser numerados (1), 2), ...) e ter no mínimo 2 passos."

          # Evidências: pelo menos 1 URL/arquivo
          printf "%s" "$EVID" | grep -Eiq '!\[[^]]*\]\(|https?://|\.png|\.jpg|\.jpeg|\.gif|\.mp4|\.mov' || \
            fail "Evidências devem conter ao menos 1 URL (print/vídeo) ou arquivo anexado."

          # Resultado: não genérico
          printf "%s" "$RES" | grep -Eiq 'funcion(a|e) corretamente|sem erro(s)?|deveria funcionar|ok' && \
            fail "Resultado esperado está genérico; descreva comportamento específico e verificável."

          # PII/segredos (heurística)
          printf "%s %s %s" "$DESC" "$EVID" "$PASS" | \
          grep -Eiq '(AKIA[0-9A-Z]{16}|-----BEGIN (RSA|OPENSSH) PRIVATE KEY-----|password=|secret=|x-api-key|token=|Authorization: Bearer)' && {
            echo "escalar=true" >> $GITHUB_OUTPUT
            fail "Possível dado sensível detectado (chaves/senhas/segredos); remova ou redija."
          }

          if [ -f precheck_errors.txt ]; then
            echo "found_errors=true" >> $GITHUB_OUTPUT
          else
            echo "found_errors=false" >> $GITHUB_OUTPUT
          fi

          DEST="${{ steps.parse.outputs.destino }}"
          # Aceita owner/repo, URL do GitHub ou apenas repo (assume owner do repo atual)
          if [ -z "$(printf "%s" "$DEST" | tr -d '[:space:]')" ]; then
            fail "Campo 'Repositório de destino' é obrigatório (formato: owner/repo, URL do GitHub ou apenas repo)."
          else
            CLEAN="$(printf "%s" "$DEST" | tr -d '\r' | sed -E 's#^https?://github\.com/##; s#/$##; s/^[[:space:]]+//; s/[[:space:]]+$//')"
            # Se for "repo" sem owner, deixamos passar e normalizamos mais tarde
            if ! grep -Eq '^[[:alnum:]_.-]+(/[[:alnum:]_.-]+)?$' <<< "$CLEAN" ; then
              fail "Repositório de destino inválido; use 'owner/repo' ou link do GitHub."
            fi
          fi

      # 5) Reprovar por pré-validação (não fecha)
      - name: Comentar por pré-validação (não fecha)
        if: steps.precheck.outputs.found_errors == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER_REPO: ${{ github.event.repository.full_name }}
          NUM: ${{ github.event.issue.number }}
        run: |
          {
            echo "A solicitação não foi aprovada pela validação automática."
            echo
            echo "**Motivos:**"
            sed 's/^/- /' precheck_errors.txt
            echo
            echo "**Sugestões:**"
            while IFS= read -r m; do
              case "$m" in
                *"ultrapassa 800"* ) echo "- Reduza as respostas para no máximo 800 caracteres." ;;
                *"no máximo 2 frases"* ) echo "- Reescreva a descrição em até 2 frases com contexto (como/quando ocorreu)." ;;
                *"Localização obrigatória"* ) echo "- Informe o caminho/tela. Ex.: Tela principal > Tabuleiro." ;;
                *"Passos para Reprodução"* ) echo "- Liste pelo menos 2 passos numerados (1), 2), ...)." ;;
                *"Evidências devem"* ) echo "- Inclua ao menos 1 link de print/vídeo ou anexe um arquivo." ;;
                *"Resultado esperado está genérico"* ) echo "- Descreva o comportamento correto verificável (ex.: limpar células e resetar o contador)." ;;
                *"dado sensível"* ) echo "- Remova chaves/senhas/segredos e substitua por <redigido>." ;;
                * ) echo "- $m" ;;
              esac
            done < precheck_errors.txt
          } > body.txt

          gh api repos/$OWNER_REPO/issues/$NUM/comments -f body="$(cat body.txt)"

      # 6) Gemini 2.5 Flash (só se passou na pré)
      - name: Validar com Gemini 2.5 Flash (JSON estrito)
        id: gemini
        if: steps.precheck.outputs.found_errors == 'false'
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          GEMINI_MODEL: ${{ env.GEMINI_MODEL }}
        run: |
          SYS='Você é um revisor de qualidade de bugs. Linguagem: Português (Brasil). Seja objetivo e claro.
          Aprove SOMENTE se TODAS as regras forem atendidas:
          - Título: até 10 palavras (conciso, preserva contexto).
          - Descrição: até 2 frases com contexto (como e quando).
          - Localização: tem ao menos 1 nível.
          - Passos: numerados, pelo menos 2 passos.
          - Evidências: contém ao menos 1 URL ou anexo.
          - Resultado: específico e verificável (não genérico).
          - Sem PII/segredos; se houver -> escalar=true e reprove.
          Não estimar esforço, nem priorizar, nem sugerir solução técnica.
          Responda SOMENTE no schema JSON. Campos "motivos" e "sugestoes" em bullets curtos.
          Se possível, proponha "titulo_corrigido" (<= 10 palavras).'

          USER=$'Descrição do Bug:\n'"${{ steps.parse.outputs.descricao }}"$'\n\nLocalização:\n'"${{ steps.parse.outputs.localizacao }}"$'\n\nPassos para Reprodução:\n'"${{ steps.parse.outputs.passos }}"$'\n\nEvidências:\n'"${{ steps.parse.outputs.evidencias }}"$'\n\nResultado Esperado:\n'"${{ steps.parse.outputs.resultado }}"

          SCHEMA=$(jq -n '{
            type:"OBJECT",
            properties:{
              aprovado:{type:"BOOLEAN"},
              escalar:{type:"BOOLEAN"},
              score:{type:"NUMBER"},
              motivos:{type:"ARRAY", items:{type:"STRING"}},
              sugestoes:{type:"ARRAY", items:{type:"STRING"}},
              titulo_corrigido:{type:"STRING"}
            },
            required:["aprovado","escalar","motivos"]
          }')

          PAYLOAD=$(jq -n \
            --arg sys "$SYS" \
            --arg user "$USER" \
            --argjson schema "$SCHEMA" \
            '{
              system_instruction:{ role:"system", parts:[{text:$sys}] },
              contents:[ { role:"user", parts:[{text:$user}] } ],
              generationConfig:{
                response_mime_type:"application/json",
                response_schema:$schema,
                temperature:0.1
              }
            }')

          HTTP=$(curl -sS -w "%{http_code}" -o resp.json \
            -X POST "https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent" \
            -H "Content-Type: application/json" \
            -H "x-goog-api-key: $GOOGLE_API_KEY" \
            --data-binary "$PAYLOAD")
          echo "HTTP status: $HTTP"
          if [ "$HTTP" -lt 200 ] || [ "$HTTP" -ge 300 ]; then echo "Erro:"; cat resp.json; exit 1; fi

          TEXT=$(jq -r '.candidates[0].content.parts[0].text // empty' resp.json)
          [ -z "$TEXT" ] && { echo "Sem texto"; cat resp.json; exit 1; }
          echo "$TEXT" | jq . > gemini.json || { echo "$TEXT"; exit 1; }

          APROVADO=$(jq -r '.aprovado' gemini.json)
          ESCALAR=$(jq -r '.escalar' gemini.json)
          TITULO_CORRIGIDO=$(jq -r '.titulo_corrigido // empty' gemini.json)
          if [ "$ESCALAR" = "true" ]; then APROVADO=false; fi
          echo "aprovado=$APROVADO" >> $GITHUB_OUTPUT
          echo "titulo_ok=$TITULO_CORRIGIDO" >> $GITHUB_OUTPUT

      # 7) Aprovado: cria issue no destino
      - name: Criar issue no repositório de destino (se aprovado)
        if: steps.gemini.outputs.aprovado == 'true'
        id: create_issue
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }} # PAT com acesso ao repo de destino
          DEST_RAW: ${{ steps.parse.outputs.destino }}
        run: |
          set -euo pipefail

          # 0) Guarda e valida o destino — evita OWNER/REPO vazios
          RAW_DEST="${{ steps.parse.outputs.destino }}"
          if [ -z "${RAW_DEST//[[:space:]]/}" ]; then
            echo "Destino vazio — não dá para criar a issue no repo alvo." >&2
            exit 0 # sai sem erro; o comentário de reprovação já foi feito na pré-validação
          fi

          # 1) Normaliza: aceita URL do GitHub, 'owner/repo' ou só 'repo'
          RAW="$(printf "%s" "$RAW_DEST" | tr -d '\r' | sed -E 's#^https?://github\.com/##; s#/$##; s/^[[:space:]]+//; s/[[:space:]]+$//')"

          if [[ "$RAW" == */* ]]; then
            OWNER="${RAW%%/*}"
            REPO="${RAW#*/}"
          else
            # só repo: usa o owner do repositório atual do workflow
            OWNER="${GITHUB_REPOSITORY%%/*}"
            REPO="$RAW"
          fi

          # sanity de caracteres
          if ! [[ "$OWNER" =~ ^[A-Za-z0-9_.-]+$ && "$REPO" =~ ^[A-Za-z0-9_.-]+$ ]]; then
            echo "Destino inválido após normalização: '$OWNER/$REPO'." >&2
            exit 0
          fi

          echo "Destino resolvido: OWNER='$OWNER' REPO='$REPO'"

          # 2) Sanity check de acesso do PAT ao repo alvo (precisa 'repo' ou perm equivalente)
          gh api -X GET "repos/$OWNER/$REPO" -q .full_name >/dev/null || {
            echo "O token não tem acesso a repos/$OWNER/$REPO (ou o repo não existe)." >&2
            exit 1
          }

          # 3) Sanity check de acesso do token ao repo alvo
          gh api -X GET "repos/$OWNER/$REPO" -q .full_name >/dev/null || {
            echo "O token não tem acesso a repos/$OWNER/$REPO (ou o repo não existe)." >&2
            exit 1
          }

          # 4) Corpo da issue
          {
            printf "**Descrição do Bug:**\n%s\n\n" '${{ steps.parse.outputs.descricao }}'
            printf "**Localização:**\n%s\n\n"       '${{ steps.parse.outputs.localizacao }}'
            printf "**Passos para Reprodução:**\n%s\n\n" '${{ steps.parse.outputs.passos }}'
            printf "**Evidências:**\n%s\n\n"        '${{ steps.parse.outputs.evidencias }}'
            printf "**Resultado Esperado:**\n%s\n\n" '${{ steps.parse.outputs.resultado }}'
            printf "_Criada automaticamente após aprovação (Gemini 2.5 Flash)._"
          } > body.txt

          # 5) Cria a issue no destino
          RESP="$(gh api "repos/$OWNER/$REPO/issues" -f title="$TITLE" -f body="$(cat body.txt)")"
          jq -r '.html_url' <<< "$RESP" > created_url.txt
          echo "url=$(cat created_url.txt)" >> "$GITHUB_OUTPUT"

      # 8) Aprovado: comenta e move para Backlog
      - name: Comentar link e mover para Backlog (no projeto)
        if: steps.gemini.outputs.aprovado == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER_REPO: ${{ github.event.repository.full_name }}
          NUM: ${{ github.event.issue.number }}
          PROJECT_ID: ${{ steps.pitem.outputs.project_id }}
          ITEM_ID: ${{ steps.pitem.outputs.item_id }}
          STATUS_FIELD_ID: ${{ steps.pitem.outputs.status_field_id }}
          BACKLOG_OPT: ${{ steps.pitem.outputs.backlog_opt }}
        run: |
          set -e
          url=$(cat created_url.txt)

          {
            echo "✅ Aprovada. Criada no destino:"
            echo "$url"
            echo
            echo "Movendo o item do projeto para **Backlog**."
          } > comment.txt

          gh api repos/$OWNER_REPO/issues/$NUM/comments -f body="$(cat comment.txt)"

          gh api graphql -f query='
            mutation($project:ID!, $item:ID!, $field:ID!, $opt:String!){
              updateProjectV2ItemFieldValue(input:{
                projectId:$project,
                itemId:$item,
                fieldId:$field,
                value:{ singleSelectOptionId:$opt }
              }){ clientMutationId }
            }' \
            -f project="$PROJECT_ID" -f item="$ITEM_ID" -f field="$STATUS_FIELD_ID" -f opt="$BACKLOG_OPT" >/dev/null

      # 9) Reprovado: comentar (não fecha)
      - name: Comentar (reprovado) — não fecha
        if: steps.precheck.outputs.found_errors == 'false' && steps.gemini.outputs.aprovado != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          OWNER_REPO: ${{ github.event.repository.full_name }}
          NUM: ${{ github.event.issue.number }}
        run: |
          jq -r '.motivos[]' gemini.json 2>/dev/null | sed 's/^/- /' > motivos.txt || echo "- Não informado." > motivos.txt
          jq -r '.sugestoes[]' gemini.json 2>/dev/null | sed 's/^/- /' > sugestoes.txt || echo "- Ajuste os campos obrigatórios conforme os motivos." > sugestoes.txt

          {
            echo "A solicitação não foi aprovada pela validação automática."
            echo
            echo "**Motivos:**"
            cat motivos.txt
            echo
            echo "**Sugestões:**"
            cat sugestoes.txt
          } > body.txt

          gh api repos/$OWNER_REPO/issues/$NUM/comments -f body="$(cat body.txt)"
